/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.maccount.module.domain.db.jooq.generated.tables;


import io.surati.gap.maccount.module.domain.db.jooq.generated.Keys;
import io.surati.gap.maccount.module.domain.db.jooq.generated.Public;
import io.surati.gap.maccount.module.domain.db.jooq.generated.tables.records.MaBundleRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MaBundle extends TableImpl<MaBundleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ma_bundle</code>
     */
    public static final MaBundle MA_BUNDLE = new MaBundle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaBundleRecord> getRecordType() {
        return MaBundleRecord.class;
    }

    /**
     * The column <code>public.ma_bundle.id</code>.
     */
    public final TableField<MaBundleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ma_bundle.code</code>.
     */
    public final TableField<MaBundleRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.ma_bundle.notes</code>.
     */
    public final TableField<MaBundleRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.VARCHAR(250), this, "");

    private MaBundle(Name alias, Table<MaBundleRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaBundle(Name alias, Table<MaBundleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ma_bundle</code> table reference
     */
    public MaBundle(String alias) {
        this(DSL.name(alias), MA_BUNDLE);
    }

    /**
     * Create an aliased <code>public.ma_bundle</code> table reference
     */
    public MaBundle(Name alias) {
        this(alias, MA_BUNDLE);
    }

    /**
     * Create a <code>public.ma_bundle</code> table reference
     */
    public MaBundle() {
        this(DSL.name("ma_bundle"), null);
    }

    public <O extends Record> MaBundle(Table<O> child, ForeignKey<O, MaBundleRecord> key) {
        super(child, key, MA_BUNDLE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<MaBundleRecord> getPrimaryKey() {
        return Keys.MA_BUNDLE_PKEY;
    }

    @Override
    public List<UniqueKey<MaBundleRecord>> getKeys() {
        return Arrays.<UniqueKey<MaBundleRecord>>asList(Keys.MA_BUNDLE_PKEY);
    }

    @Override
    public MaBundle as(String alias) {
        return new MaBundle(DSL.name(alias), this);
    }

    @Override
    public MaBundle as(Name alias) {
        return new MaBundle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaBundle rename(String name) {
        return new MaBundle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaBundle rename(Name name) {
        return new MaBundle(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
