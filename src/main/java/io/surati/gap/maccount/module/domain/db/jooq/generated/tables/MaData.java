/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.maccount.module.domain.db.jooq.generated.tables;


import io.surati.gap.maccount.module.domain.db.jooq.generated.Keys;
import io.surati.gap.maccount.module.domain.db.jooq.generated.Public;
import io.surati.gap.maccount.module.domain.db.jooq.generated.tables.records.MaDataRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MaData extends TableImpl<MaDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ma_data</code>
     */
    public static final MaData MA_DATA = new MaData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaDataRecord> getRecordType() {
        return MaDataRecord.class;
    }

    /**
     * The column <code>public.ma_data.id</code>.
     */
    public final TableField<MaDataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ma_data.bundle_id</code>.
     */
    public final TableField<MaDataRecord, Integer> BUNDLE_ID = createField(DSL.name("bundle_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ma_data.title_id</code>.
     */
    public final TableField<MaDataRecord, Integer> TITLE_ID = createField(DSL.name("title_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ma_data.section_id</code>.
     */
    public final TableField<MaDataRecord, Integer> SECTION_ID = createField(DSL.name("section_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ma_data.imputation</code>.
     */
    public final TableField<MaDataRecord, String> IMPUTATION = createField(DSL.name("imputation"), SQLDataType.VARCHAR(25), this, "");

    private MaData(Name alias, Table<MaDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaData(Name alias, Table<MaDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ma_data</code> table reference
     */
    public MaData(String alias) {
        this(DSL.name(alias), MA_DATA);
    }

    /**
     * Create an aliased <code>public.ma_data</code> table reference
     */
    public MaData(Name alias) {
        this(alias, MA_DATA);
    }

    /**
     * Create a <code>public.ma_data</code> table reference
     */
    public MaData() {
        this(DSL.name("ma_data"), null);
    }

    public <O extends Record> MaData(Table<O> child, ForeignKey<O, MaDataRecord> key) {
        super(child, key, MA_DATA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<MaDataRecord> getPrimaryKey() {
        return Keys.MA_DATA_PKEY;
    }

    @Override
    public List<UniqueKey<MaDataRecord>> getKeys() {
        return Arrays.<UniqueKey<MaDataRecord>>asList(Keys.MA_DATA_PKEY);
    }

    @Override
    public List<ForeignKey<MaDataRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MaDataRecord, ?>>asList(Keys.MA_DATA__MA_DATA_BUNDLE_ID_FKEY, Keys.MA_DATA__MA_DATA_TITLE_ID_FKEY, Keys.MA_DATA__MA_DATA_SECTION_ID_FKEY);
    }

    private transient MaBundle _maBundle;
    private transient MaTitle _maTitle;
    private transient MaSection _maSection;

    public MaBundle maBundle() {
        if (_maBundle == null)
            _maBundle = new MaBundle(this, Keys.MA_DATA__MA_DATA_BUNDLE_ID_FKEY);

        return _maBundle;
    }

    public MaTitle maTitle() {
        if (_maTitle == null)
            _maTitle = new MaTitle(this, Keys.MA_DATA__MA_DATA_TITLE_ID_FKEY);

        return _maTitle;
    }

    public MaSection maSection() {
        if (_maSection == null)
            _maSection = new MaSection(this, Keys.MA_DATA__MA_DATA_SECTION_ID_FKEY);

        return _maSection;
    }

    @Override
    public MaData as(String alias) {
        return new MaData(DSL.name(alias), this);
    }

    @Override
    public MaData as(Name alias) {
        return new MaData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaData rename(String name) {
        return new MaData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaData rename(Name name) {
        return new MaData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, Integer, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
