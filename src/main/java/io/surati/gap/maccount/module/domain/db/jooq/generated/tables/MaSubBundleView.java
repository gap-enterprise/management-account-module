/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.maccount.module.domain.db.jooq.generated.tables;


import io.surati.gap.maccount.module.domain.db.jooq.generated.Public;
import io.surati.gap.maccount.module.domain.db.jooq.generated.tables.records.MaSubBundleViewRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MaSubBundleView extends TableImpl<MaSubBundleViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ma_sub_bundle_view</code>
     */
    public static final MaSubBundleView MA_SUB_BUNDLE_VIEW = new MaSubBundleView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaSubBundleViewRecord> getRecordType() {
        return MaSubBundleViewRecord.class;
    }

    /**
     * The column <code>public.ma_sub_bundle_view.no</code>.
     */
    public final TableField<MaSubBundleViewRecord, Long> NO = createField(DSL.name("no"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ma_sub_bundle_view.id</code>.
     */
    public final TableField<MaSubBundleViewRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ma_sub_bundle_view.fiscal_year</code>.
     */
    public final TableField<MaSubBundleViewRecord, Short> FISCAL_YEAR = createField(DSL.name("fiscal_year"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.ma_sub_bundle_view.creation_date</code>.
     */
    public final TableField<MaSubBundleViewRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.ma_sub_bundle_view.author_id</code>.
     */
    public final TableField<MaSubBundleViewRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.ma_sub_bundle_view.title</code>.
     */
    public final TableField<MaSubBundleViewRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.ma_sub_bundle_view.section</code>.
     */
    public final TableField<MaSubBundleViewRecord, String> SECTION = createField(DSL.name("section"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.ma_sub_bundle_view.bundle</code>.
     */
    public final TableField<MaSubBundleViewRecord, String> BUNDLE = createField(DSL.name("bundle"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.ma_sub_bundle_view.bundle_split_warrant</code>.
     */
    public final TableField<MaSubBundleViewRecord, Boolean> BUNDLE_SPLIT_WARRANT = createField(DSL.name("bundle_split_warrant"), SQLDataType.BOOLEAN, this, "");

    private MaSubBundleView(Name alias, Table<MaSubBundleViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaSubBundleView(Name alias, Table<MaSubBundleViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"ma_sub_bundle_view\" as  SELECT row_number() OVER (PARTITION BY ma_sub_bundle.fiscal_year) AS no,\n    ma_sub_bundle.id,\n    ma_sub_bundle.fiscal_year,\n    ma_sub_bundle.creation_date,\n    ma_sub_bundle.author_id,\n    ma_sub_bundle.title,\n    ma_sub_bundle.section,\n    ma_sub_bundle.bundle,\n    ma_sub_bundle.bundle_split_warrant\n   FROM ma_sub_bundle\n  ORDER BY ma_sub_bundle.id;"));
    }

    /**
     * Create an aliased <code>public.ma_sub_bundle_view</code> table reference
     */
    public MaSubBundleView(String alias) {
        this(DSL.name(alias), MA_SUB_BUNDLE_VIEW);
    }

    /**
     * Create an aliased <code>public.ma_sub_bundle_view</code> table reference
     */
    public MaSubBundleView(Name alias) {
        this(alias, MA_SUB_BUNDLE_VIEW);
    }

    /**
     * Create a <code>public.ma_sub_bundle_view</code> table reference
     */
    public MaSubBundleView() {
        this(DSL.name("ma_sub_bundle_view"), null);
    }

    public <O extends Record> MaSubBundleView(Table<O> child, ForeignKey<O, MaSubBundleViewRecord> key) {
        super(child, key, MA_SUB_BUNDLE_VIEW);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public MaSubBundleView as(String alias) {
        return new MaSubBundleView(DSL.name(alias), this);
    }

    @Override
    public MaSubBundleView as(Name alias) {
        return new MaSubBundleView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaSubBundleView rename(String name) {
        return new MaSubBundleView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaSubBundleView rename(Name name) {
        return new MaSubBundleView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Short, LocalDateTime, Long, String, String, String, Boolean> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
