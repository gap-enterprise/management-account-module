/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.maccount.module.domain.db.jooq.generated.tables;


import io.surati.gap.maccount.module.domain.db.jooq.generated.Keys;
import io.surati.gap.maccount.module.domain.db.jooq.generated.Public;
import io.surati.gap.maccount.module.domain.db.jooq.generated.tables.records.MaWarrantBundledRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MaWarrantBundled extends TableImpl<MaWarrantBundledRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ma_warrant_bundled</code>
     */
    public static final MaWarrantBundled MA_WARRANT_BUNDLED = new MaWarrantBundled();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaWarrantBundledRecord> getRecordType() {
        return MaWarrantBundledRecord.class;
    }

    /**
     * The column <code>public.ma_warrant_bundled.id</code>.
     */
    public final TableField<MaWarrantBundledRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ma_warrant_bundled.fiscal_year</code>.
     */
    public final TableField<MaWarrantBundledRecord, Short> FISCAL_YEAR = createField(DSL.name("fiscal_year"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.ma_warrant_bundled.sub_bundle_id</code>.
     */
    public final TableField<MaWarrantBundledRecord, Long> SUB_BUNDLE_ID = createField(DSL.name("sub_bundle_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private MaWarrantBundled(Name alias, Table<MaWarrantBundledRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaWarrantBundled(Name alias, Table<MaWarrantBundledRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ma_warrant_bundled</code> table reference
     */
    public MaWarrantBundled(String alias) {
        this(DSL.name(alias), MA_WARRANT_BUNDLED);
    }

    /**
     * Create an aliased <code>public.ma_warrant_bundled</code> table reference
     */
    public MaWarrantBundled(Name alias) {
        this(alias, MA_WARRANT_BUNDLED);
    }

    /**
     * Create a <code>public.ma_warrant_bundled</code> table reference
     */
    public MaWarrantBundled() {
        this(DSL.name("ma_warrant_bundled"), null);
    }

    public <O extends Record> MaWarrantBundled(Table<O> child, ForeignKey<O, MaWarrantBundledRecord> key) {
        super(child, key, MA_WARRANT_BUNDLED);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<MaWarrantBundledRecord> getPrimaryKey() {
        return Keys.MA_WARRANT_BUNDLED_PKEY;
    }

    @Override
    public List<UniqueKey<MaWarrantBundledRecord>> getKeys() {
        return Arrays.<UniqueKey<MaWarrantBundledRecord>>asList(Keys.MA_WARRANT_BUNDLED_PKEY);
    }

    @Override
    public List<ForeignKey<MaWarrantBundledRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MaWarrantBundledRecord, ?>>asList(Keys.MA_WARRANT_BUNDLED__MA_WARRANT_FOR_BUNDLE_SUB_BUNDLE_ID_FKEY);
    }

    private transient MaSubBundle _maSubBundle;

    public MaSubBundle maSubBundle() {
        if (_maSubBundle == null)
            _maSubBundle = new MaSubBundle(this, Keys.MA_WARRANT_BUNDLED__MA_WARRANT_FOR_BUNDLE_SUB_BUNDLE_ID_FKEY);

        return _maSubBundle;
    }

    @Override
    public MaWarrantBundled as(String alias) {
        return new MaWarrantBundled(DSL.name(alias), this);
    }

    @Override
    public MaWarrantBundled as(Name alias) {
        return new MaWarrantBundled(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaWarrantBundled rename(String name) {
        return new MaWarrantBundled(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaWarrantBundled rename(Name name) {
        return new MaWarrantBundled(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Short, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
